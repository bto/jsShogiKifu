/*
 * csa.js
 *
 * Copyright 2011, Masato Bito
 * Licensed under the MIT license.
 *
 */
(function(Kifu) {
Kifu.Csa = (function(kifu) { return new Kifu.Csa.initialize(kifu); });
Kifu.Csa.extend = Kifu.Csa.prototype.extend = Kifu.extend;


Kifu.Csa.prototype.extend({
  output: function() {
    var kifu = this.kifu;
    if (kifu.info.format == 'csa') {
      return kifu.info.source;
    }

    var result = "' --- generated by jsShogiKifu ---\n";
    result += "V2.2\n";
    result += this.outputInfo(kifu.info);
    result += this.outputSuite(kifu.suite_init, kifu.info);
    result += this.outputMoves(kifu.moves);
    return result;
  },

  outputBoard: function(board) {
    var result = '';

    for (var y = 1; y <= 9; y++) {
      result += 'P' + y;
      for (var x = 9; 1 <= x; x--) {
        var cell = board[x][y];
        if (cell) {
          result += (cell.is_black ? '+' : '-') + cell.piece;
        } else {
          result += ' * ';
        }
      }
      result += "\n";
    }

    return result;
  },

  outputDate: function(date) {
    var yy = date.getFullYear();
    var mm = date.getMonth() + 1;
    if (mm < 10) {
      mm = '0' + mm;
    }
    var dd = date.getDate();
    if (dd < 10) {
      dd = '0' + dd;
    }
    var h  = date.getHours();
    if (h < 10) {
      h = '0' + h;
    }
    var m  = date.getMinutes();
    if (m < 10) {
      m = '0' + m;
    }
    var s  = date.getSeconds();
    if (s < 10) {
      s = '0' + s;
    }
    return yy + '/' + mm + '/' + dd + ' ' + h + ':' + m + ':' + s;
  },

  outputInfo: function(info) {
    var result = '';

    for (var key in info) {
      var value = info[key];
      switch (key) {
      case 'event':
      case 'opening':
      case 'site':
        result += '$' + key.toUpperCase() + ':' + value + "\n";
        break;

      case 'end_time':
      case 'start_time':
        result += '$' + key.toUpperCase() + ':' + this.outputDate(value) + "\n";
        break;

      case 'player_black':
      case 'player_white':
        var player = key == 'player_black' ? '+' : '-';
        result += 'N' + player + value + "\n";
        break;

      case 'time_limit':
        result += '$TIME_LIMIT:';
        var h = value.allotted / 60;
        if (h < 10) {
          result += '0';
        }
        result += h + ':';
        var m = value.allotted % 60;
        if (m < 10) {
          result += '0';
        }
        result += m + '+';
        var s = value.extra || 0;
        if (s < 10) {
          result += '0';
        }
        result += s + "\n";
        break;

      default:
        break;
      }
    }

    return result;
  },

  outputMoves: function(moves) {
    var result = '';

    var records = moves.records;
    var l       = records.length;
    for (var i = 0; i < l; i++) {
      var record = records[i];

      switch (record.type) {
      case 'move':
        var from   = record.from;
        var to     = record.to;
        var player = record.is_black ? '+' : '-';
        result += player + from.x + from.y + to.x + to.y + to.piece + "\n";
        if (record.period) {
          result += 'T' + record.period + "\n";
        }
        break;

      case 'init':
        break;

      default:
        result += '%' + record.type.toUpperCase() + "\n";
        break;
      }

      if (record.comment) {
        var lines = this.toLines(record.comment);
        var m     = lines.length;
        for (var j = 0; j < m; j++) {
          result += "'*" + lines[j] + "\n";
        }
      }
    }

    return result;
  },

  outputStand: function(stand) {
    var result = '';

    var players = ['black', 'white'];
    for (var p in players) {
      var player       = players[p];
      var stand_player = stand[player];
      var player_mark  = player == 'black' ? '+' : '-';

      for (var piece in stand_player) {
        var amount = stand_player[piece];
        for (var i = 0; i < amount; i++) {
          result += player_mark + '00' + piece;
        }
      }
    }

    if (result) {
      return 'P' + result + "\n";
    } else {
      return '';
    }
  },

  outputSuite: function(suite, info) {
    var result = '';
    result += this.outputBoard(suite.board);
    result += this.outputStand(suite.stand);
    result += (info.player_start == 'black' ? '+' : '-') + "\n";
    return result;
  },

  parse: function() {
    var lines = this.toLines(this.kifu.info.source);
    var l = lines.length;
    for (var i = 0; i < l; i++) {
      var line = lines[i];
      this.parseByLine(line);
    }

    return this;
  },

  parseByLine: function(line) {
    var kifu = this.kifu;

    if (line == '+') {
      kifu.info.player_start = 'black';
      return true;
    } else if (line == '-') {
      kifu.info.player_start = 'white';
      return true;
    } else if (line.substr(0, 2) == "'*") {
      kifu.moves.addComment(line.substr(2));
      return true;
    }

    switch (line.charAt(0)) {
    case '$':
      var pos   = line.indexOf(':');
      var key   = line.substr(1, pos-1).toLowerCase();
      var value = line.substr(pos+1);

      switch (key) {
      case 'end_time':
      case 'start_time':
        var date = new Date();
        date.setTime(Date.parse(value));
        value = date;
        break;

      case 'time_limit':
        var hours   = parseInt(value.substr(0, 2));
        var minutes = parseInt(value.substr(3, 2));
        var extra   = parseInt(value.substr(6));
        value = {
          allotted: hours * 60 + minutes,
          extra: extra};
        break;
      }

      kifu.info[key] = value;
      return true;

    case '%':
      var value   = line.substr(1);
      var options = {};

      switch (value.charAt(0)) {
      case '+':
      case '-':
        options.is_black = value.charAt(0) == '+' ? true : false;
        value = value.substr(1);
        break;
      }

      kifu.moves.addSpecial(value, options);
      return true;

    case '+':
    case '-':
      var from     = [line.charAt(1)-'0', line.charAt(2)-'0'];
      var to       = [line.charAt(3)-'0', line.charAt(4)-'0'];
      var piece    = line.substr(5, 2);
      var is_black = line.charAt(0) == '+' ? true : false;
      kifu.moves.addMove(from, to, piece, {is_black: is_black});
      return true;

    case 'N':
      var player = 'player_' + (line.charAt(1) == '+' ? 'black' : 'white');
      kifu.info[player] = line.substr(2);
      return true;

    case 'P':
      switch (line.charAt(1)) {
      case 'I':
        kifu.suite_init.hirate();
        for (var i = 0; ; i++) {
          var p_info = line.substr(2+i*4, 4);
          if (p_info.length < 4) {
            break;
          }
          var x     = p_info.charAt(0) - '0';
          var y     = p_info.charAt(1) - '0';
          var piece = p_info.substr(2);
          kifu.suite_init.cellRemove(x, y, piece);
        }
        return true;

      case '+':
      case '-':
        var is_black = line.charAt(1) == '+';
        for (var i = 0; ; i++) {
          var p_info = line.substr(2+i*4, 4);
          if (p_info.length < 4) {
            break;
          }
          var x     = p_info.charAt(0) - '0';
          var y     = p_info.charAt(1) - '0';
          var piece = p_info.substr(2);
          if (x == 0 && y == 0) {
            kifu.suite_init.standDeploy(piece, is_black);
          } else {
            kifu.suite_init.cellDeploy(x, y, piece, is_black);
          }
        }
        return true;

      default:
        var y = line.charAt(1) - '0';
        if (y < 1 || 9 < y) {
          return false;
        }
        for (var i = 0; i < 9; i++) {
          var p_info = line.substr(2+i*3, 3);
          switch (p_info.charAt(0)) {
          case '+':
            var is_black = true;
            break;
          case '-':
            var is_black = false;
            break;
          default:
            continue;
          }
          var x     = 9 - i;
          var piece = p_info.substr(1, 2);
          kifu.suite_init.cellDeploy(x, y, piece, is_black);
        }
        return true;
      }
      return false;

    case 'T':
      var period = parseInt(line.substr(1));
      kifu.moves.addPeriod(period);
      return true;

    case 'V':
      kifu.info.version = line.substr(1);
      return true;
    }

    return false;
  },

  toLines: function(source) {
    var result = [];
    var lines = source.replace(/,(\r?\n|\r)/g, '').split(/\r?\n|\r/);
    var l = lines.length;
    for (var i = 0; i < l; i++) {
      var line = lines[i];
      if (line) {
        result.push(lines[i]);
      }
    }
    return result;
  }
});

Kifu.Csa.extend({
  initialize: function(kifu) {
    this.kifu = kifu;
  }
});


Kifu.Csa.initialize.prototype = Kifu.Csa.prototype
})(Kifu);

// Local variables:
// indent-tabs-mode: nil
// js2-basic-offset: 2
// end:
// vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2:
