/*
 * ki2.js
 *
 * Copyright 2011, Masato Bito
 * Licensed under the MIT license.
 *
 */
(function(Kifu) {
Kifu.Ki2 = (function(kifu) { return new Kifu.Ki2.initialize(kifu); });
Kifu.Ki2.extend = Kifu.Ki2.prototype.extend = Kifu.extend;


var promote_map = {
  FU: 'TO',
  KY: 'NY',
  KE: 'NK',
  GI: 'NG',
  KA: 'UM',
  HI: 'RY'
};

Kifu.Ki2.prototype.extend(Kifu.Kif.prototype);
Kifu.Ki2.prototype.extend({
  output: function() {
    var kifu = this.kifu;
    if (kifu.info.format == 'ki2') {
      return kifu.info.source;
    }

    var result = "# --- generated by jsShogiKifu ---\n";
    result += this.outputInfo(kifu.info);
    result += this.outputSuite(kifu.suite_init, kifu.info);
    result += this.outputMoves(kifu.moves);
    return result;
  },

  outputMoves: function(moves) {
    var result = '';

    var records = moves.records;
    var l       = records.length;
    for (var i = 1; i < l; i++) {
      var record = records[i];
      var from   = record.from;
      var to     = record.to;

      switch (record.type) {
      case 'move':
        result += (record.is_black ? '▲' : '△');
        if (record.is_same_place) {
          result += '同　';
        } else {
          result += Kifu.integerToZenkaku(to.x) + Kifu.integerToKanji(to.y);
        }
        result += Kifu.pieceToMovePiece(from.piece);
        if (record.relative) {
          result += Kifu.relativeToKanji(record.relative);
        }
        if (record.direction) {
          result += Kifu.directionToKanji(record.direction);
        }
        if (from.piece != to.piece) {
          result += '成';
        }
        if (record.put) {
          result += '打';
        }
        break;
      }

      if ((i % 8) == 0) {
        result += "\n";
      }
    }

    return result;
  },

  parseByLineAsMove: function(line) {
    if (!line.match(/^[▽▼△▲]/)) {
      return false;
    }

    var moves   = this.kifu.moves;
    var p_infos = line;
    while (p_infos.match(/([▽▼△▲][^▽▼△▲]*)(.*)/)) {
      p_infos    = RegExp.$2;
      var p_info = this.strip(RegExp.$1);
      var params = {from: {}, to: {}};
      var from   = params.from;
      var to     = params.to;

      switch (p_info.charAt(0)) {
      case '▲':
      case '▼':
        params.is_black = true;
        break;
      case '△':
      case '▽':
        params.is_black = false;
        break;
      }
      p_info     = p_info.substr(1);
      params.str = p_info;

      if (p_info.charAt(0) == '同') {
        to.x   = 0;
        to.y   = 0;
        p_info = p_info.substr(1);
        if (p_info.charAt(0) == '　') {
          p_info = p_info.substr(1);
        }
      } else {
        to.x   = Kifu.zenkakuToInteger(p_info.charAt(0));
        to.y   = Kifu.kanjiToInteger(p_info.charAt(1));
        p_info = p_info.substr(2);
      }

      if (p_info.charAt(0) == '成') {
        from.piece = to.piece = Kifu.movePieceToPiece(p_info.substr(0, 2));
        p_info = p_info.substr(2);
      } else {
        from.piece = to.piece = Kifu.movePieceToPiece(p_info.charAt(0));
        p_info = p_info.substr(1);
      }

      var relative = Kifu.kanjiToRelative(p_info.charAt(0));
      if (relative) {
        params.relative = relative;
        p_info          = p_info.substr(1);
      }

      var direction = Kifu.kanjiToDirection(p_info.charAt(0));
      if (direction) {
        params.direction = direction;
        p_info           = p_info.substr(1);
      }

      switch (p_info) {
      case '成':
        from.piece = to.piece;
        to.piece   = promote_map[to.piece];
        p_info     = p_info.substr(1);
        break;

      case '打':
        from.x = from.y = 0;
        p_info = p_info.substr(1);
        break;
      }

      moves.addMove(params);
    }

    return true;
  }
});

Kifu.Ki2.extend({
  initialize: function(kifu) {
    this.kifu = kifu;
  }
});


Kifu.Ki2.initialize.prototype = Kifu.Ki2.prototype;
})(Kifu);

// Local variables:
// indent-tabs-mode: nil
// js2-basic-offset: 2
// end:
// vim: set expandtab tabstop=2 shiftwidth=2 softtabstop=2:
